apiVersion: v1
data:
  gateway-service.yml: |-
    # Defines the root base path at which the gateway exposes all geoserver request paths
    # We're not setting the spring.webflux.base-path because spring-cloud Gateway doesn't
    # work properly with it. See https://github.com/spring-cloud/spring-cloud-gateway/issues/1759
    # For example, if geoserver.base-path=/geoserver-cloud, then geoserver requests will be served
    # under that path prefix (e.g. http://localhost:9090/geoserver-cloud/web, http://localhost:9090/geoserver-cloud/wfs, etc)
    # Examples:
    #geoserver.base-path:
    #geoserver.base-path: /geoserver-cloud
    geoserver.base-path: /geoserver
    # Leave it empty for no additional path, setting it to / won't work currently
    #
    # Please note any other prefix than the empty string will require a trailing slash in the root URL
    # for the redirection to the web-ui to work. This is something we need to fix. For example:
    # http://localhost:9090/geoserver-cloud will return 404, but http://localhost:9090/geoserver-cloud/ will work.

    # by default, assumes a discovery-client is in use, and perform client-side load balancing on
    # the advertised instances. See the 'standalone' profile notes for a static config
    targets:
      acl: http://acl:8080
      wfs: lb://wfs-service
      wms: lb://wms-service
      wcs: lb://wcs-service
      wps: lb://wps-service
      rest: lb://restconfig-v1
      gwc: lb://gwc-service
      webui: lb://web-ui
      webui-demo: lb://web-ui

    # Configure routes to services. See https://cloud.spring.io/spring-cloud-gateway/single/spring-cloud-gateway.html
    server:
      compression:
        enabled: true

    spring:
      cloud:
        gateway:
          x-forwarded:
            for-enabled: true
            host-enabled: true
            port-enabled: true
            proto-enabled: true
            prefix-enabled: true
          globalcors:
            cors-configurations:
              "[/**]":
                allowedOrigins: "*"
                allowedHeaders: "*"
                allowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                  - OPTIONS
                  - HEAD
          default-filters:
            - StripBasePath=${geoserver.base-path} #remove the base path on downstream requests
          actuator:
            verbose:
              enabled: true
          routes:
            - id: acl
              uri: ${targets.acl}
              predicates:
              - Path=${geoserver.base-path}/acl,${geoserver.base-path}/acl/**
              filters:
              - RewritePath=/acl,/acl/
            # WFS routes
            - id: wfs # proxies requests to gateway-service:/wfs to wfs-service:/wfs
              uri: ${targets.wfs}
              predicates:
                - Path=${geoserver.base-path}/wfs,${geoserver.base-path}/{workspace}/wfs,${geoserver.base-path}/{workspace}/{layer}/wfs,${geoserver.base-path}/schemas/wfs/**
            # proxy [/{workspace}]/ows?SERVICE=wfs to wfs-service:[/{workspace}]/ows?SERVICE=wfs. Param value is case insensitive, name is not.
            - id: wfs_ows
              uri: ${targets.wfs}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wfs) # match service=wfs case insensitively
            # WMS routes
            - id: wms # proxies requests to gateway-service:/wms to wms-service:/wms
              uri: ${targets.wms}
              predicates:
                - Path=${geoserver.base-path}/wms,${geoserver.base-path}/{workspace}/wms,${geoserver.base-path}/{workspace}/{layer}/wms,${geoserver.base-path}/schemas/wms/**,${geoserver.base-path}/openlayers/**,${geoserver.base-path}/openlayers3/**
            - id: wms_ows # proxy [/{workspace}]/ows?SERVICE=wms to wms-service:[/{workspace}]/ows?SERVICE=wms. Param value is case insensitive, name is not.
              uri: ${targets.wms}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wms) # match service=wms case insensitively
            - id: kml # proxies requests to kml endpoints to the wms service
              uri: ${targets.wms}
              predicates:
                - Path=${geoserver.base-path}/wms/kml,${geoserver.base-path}/{workspace}/wms/kml,${geoserver.base-path}/kml/icon/**
            # WCS routes
            - id: wcs # proxies requests to gateway-service:/wcs to wcs-service:/wcs
              uri: ${targets.wcs}
              predicates:
                - Path=${geoserver.base-path}/wcs,${geoserver.base-path}/{workspace}/wcs,${geoserver.base-path}/{workspace}/{layer}/wcs,${geoserver.base-path}/schemas/wcs/**
            - id: wcs_ows # proxy [/{workspace}]/ows?SERVICE=wcs to wcs-service:[/{workspace}]/ows?SERVICE=wcs. Param value is case insensitive, name is not.
              uri: ${targets.wcs}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{workspace}/ows,${geoserver.base-path}/{workspace}/{layer}/ows
                - RegExpQuery=(?i:service),(?i:wcs) # match service=wcs case insensitively
            # WPS routes
            - id: wps # proxies requests to gateway-service:/wps to wfs-service:/wps
              uri: ${targets.wps}
              predicates:
                - Path=${geoserver.base-path}/wps,${geoserver.base-path}/{segment}/wps,${geoserver.base-path}/schemas/wps/**
            - id: wps_ows # proxy [/{workspace}]/ows?SERVICE=wps to wps-service:[/{workspace}]/ows?SERVICE=wps. Param value is case insensitive, name is not.
              uri: ${targets.wps}
              predicates:
                - Path=${geoserver.base-path}/ows,${geoserver.base-path}/{segment}/ows
                - RegExpQuery=(?i:service),(?i:wps) # match service=wps case insensitively
            # REST configuration routes
            - id: restconfig
              uri: ${targets.rest}
              predicates:
                - Path=${geoserver.base-path}/rest/**
            # GeoWebcache configuration routes
            - id: gwc
              uri: ${targets.gwc}
              predicates:
                - Path=${geoserver.base-path}/gwc/**,${geoserver.base-path}/{workspace}/gwc/**,${geoserver.base-path}/{workspace}/{layer}/gwc/**
            # Web UI configuration routes
            - id: webui
              uri: ${targets.webui}
              predicates:
                - Path=${geoserver.base-path},${geoserver.base-path}/**
              #- Path=${geoserver.base-path},${geoserver.base-path}/,${geoserver.base-path}/index.html,${geoserver.base-path}/web,${geoserver.base-path}/web/**,${geoserver.base-path}/j_spring_security_check,${geoserver.base-path}/j_spring_security_logout
            # WebUi - demo
            - id: webui_demo
              uri: ${targets.webui-demo}
              predicates:
              - Path=${geoserver.base-path}/TestWfsPost
    management:
      endpoints:
        enabled-by-default: true
        web.exposure.include: "*"
      endpoint:
        info.enabled: true
        metrics.enabled: true
        shutdown.enabled: true
        health:
          enabled: true
          show-details: always
      metrics:
        binders:
          processor.enabled: true
          uptime.enabled: true
          jvm.enabled: true
        enable.all: true
        enable.jvm: true
        export:
          atlas.enabled: false

    logging:
      level:
        root: info
        # log flooding with "INFO Resolving eureka endpoints via configuration"
        com.netflix.discovery.shared.resolver: warn
    ---
    # this profile is automatically included if any of the embedded
    # config_first or discovery_first profile groups are active
    spring.config.activate.on-profile: discovery_eureka
    # Should only be set in application.yml. Setting the value in bootstrap.yml will cause undesirable side effects like registering in eureka with an UNKNOWN status.
    # See https://cloud.spring.io/spring-cloud-netflix/2.0.x/multi/multi__service_discovery_eureka_clients.html#_eureka_s_health_checks
    eureka.client.healthcheck.enabled: true
    eureka.server.url: http://discovery:8761/eureka
    ---
    spring.config.activate.on-profile: standalone
    # Define static targets using known host names.
    # Host names can be docker-compose assigned service names, or k8s service names as appropriate
    targets:
      acl: http://acl:8080
      wfs: http://wfs:8080
      wms: http://wms:8080
      wcs: http://wcs:8080
      wps: http://wps:8080
      rest: http://rest:8080
      gwc: http://gwc:8080
      webui: http://webui:8080
    ---
    spring.config.activate.on-profile: debug

    logging:
      level:
          root: debug

    ---
    spring.config.activate.on-profile: local
    targets:
      acl: http://localhost:9000
      wfs: http://localhost:9101
      wms: http://localhost:9102
      wcs: http://localhost:9103
      wps: http://localhost:9104
      rest: http://localhost:9105
      webui: http://localhost:9106
      gwc: http://localhost:9107
kind: ConfigMap
metadata:
  name: gateway-configmap
  namespace: default

